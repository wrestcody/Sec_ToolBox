name: Python Security & Quality CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security-and-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 bandit safety pytest black isort mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Code formatting check with Black
      run: |
        black --check --diff .

    - name: Import sorting check with isort
      run: |
        isort --check-only --diff .

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking with mypy
      run: |
        mypy . --ignore-missing-imports --no-strict-optional
      continue-on-error: true

    - name: Security linting with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json
        bandit -r . --severity-level medium

    - name: Check for known security vulnerabilities in dependencies
      run: |
        safety check --json --output safety-report.json
        safety check

    - name: Secrets detection
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run tests
      run: |
        if [ -d "tests" ]; then
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        else
          echo "No tests directory found, skipping tests"
        fi

    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload security reports as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        allow-ghsas: GHSA-xxxx-xxxx-xxxx
        deny-licenses: GPL-2.0, GPL-3.0

  semgrep:
    runs-on: ubuntu-latest
    name: Semgrep Security Scan
    steps:
    - uses: actions/checkout@v4
    
    - uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
        generateSarif: "1"
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep.sarif
      if: always()

  docker-security:
    runs-on: ubuntu-latest
    if: hashFiles('**/Dockerfile*') != ''
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner in fs mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'