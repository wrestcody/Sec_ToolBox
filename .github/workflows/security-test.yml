name: Security Testing & Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security tests weekly
    - cron: '0 2 * * 1'

jobs:
  security-tests:
    name: Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
        
    - name: Run Bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt -o bandit-report.txt || true
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt || true
        
    - name: Run basic security tests
      run: |
        # Test password analyzer
        python tools/security_armory/password_analyzer/password_analyzer.py "testpassword123" --disable-guardian-mandate
        
        # Test network scanner (safe mode)
        python tools/security_armory/network_scanner/network_scanner.py 127.0.0.1 --disable-guardian-mandate
        
        # Test Guardian's Mandate framework
        python -c "
        try:
            from guardians_mandate_integration import GuardianTool, EvidenceLevel
            print('✅ Guardian\'s Mandate framework available')
        except ImportError:
            print('⚠️ Guardian\'s Mandate framework not available')
        "
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy
        
    - name: Run Black code formatter check
      run: black --check --diff .
      
    - name: Run isort import sorter check
      run: isort --check-only --diff .
      
    - name: Run flake8 linting
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: Run mypy type checking
      run: mypy tools/ --ignore-missing-imports

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Guardian's Mandate tests
      run: |
        python test_guardians_mandate.py || echo "Guardian's Mandate tests completed"
        
    - name: Run GRC MCP Server tests
      run: |
        python mcp_demo.py || echo "MCP Server tests completed"
        
    - name: Test tool imports
      run: |
        # Test that all tools can be imported
        python -c "
        import sys
        import os
        sys.path.insert(0, os.path.join(os.getcwd(), 'tools'))
        
        # Test network scanner
        try:
            from security_armory.network_scanner.network_scanner import NetworkScanner
            print('✅ Network Scanner imported successfully')
        except ImportError as e:
            print(f'⚠️ Network Scanner import failed: {e}')
            
        # Test password analyzer
        try:
            from security_armory.password_analyzer.password_analyzer import PasswordAnalyzer
            print('✅ Password Analyzer imported successfully')
        except ImportError as e:
            print(f'⚠️ Password Analyzer import failed: {e}')
        "

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README links
      run: |
        # Check if README.md exists and has content
        if [ ! -f README.md ]; then
          echo "❌ README.md not found"
          exit 1
        fi
        
        # Check if README has minimum content
        word_count=$(wc -w < README.md)
        if [ "$word_count" -lt 100 ]; then
          echo "❌ README.md seems too short ($word_count words)"
          exit 1
        fi
        
        echo "✅ README.md looks good ($word_count words)"
        
    - name: Check documentation structure
      run: |
        # Check if essential docs exist
        required_docs=("CONTRIBUTING.md" "LICENSE" "SECURITY.md")
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "⚠️ $doc not found"
          else
            echo "✅ $doc found"
          fi
        done
        
    - name: Validate JSON files
      run: |
        # Check if JSON files are valid
        find . -name "*.json" -type f | while read -r file; do
          if python -m json.tool "$file" > /dev/null 2>&1; then
            echo "✅ $file is valid JSON"
          else
            echo "❌ $file is invalid JSON"
            exit 1
          fi
        done

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run pip-audit
      run: |
        pip install pip-audit
        pip-audit --format json --output pip-audit-report.json || true
        pip-audit --output pip-audit-report.txt || true
        
    - name: Upload audit reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-audit-reports
        path: |
          pip-audit-report.json
          pip-audit-report.txt

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        args: --only-verified --format json --output trufflehog-report.json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload secrets report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: secrets-detection-report
        path: trufflehog-report.json

  compliance-check:
    name: Compliance & Standards Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check license compliance
      run: |
        # Check if LICENSE file exists and is valid
        if [ ! -f LICENSE ]; then
          echo "❌ LICENSE file not found"
          exit 1
        fi
        
        # Check for common license types
        if grep -q "MIT License" LICENSE || grep -q "Apache License" LICENSE || grep -q "GPL" LICENSE; then
          echo "✅ Valid license found"
        else
          echo "⚠️ License type not recognized"
        fi
        
    - name: Check security policy
      run: |
        # Check if SECURITY.md exists
        if [ ! -f SECURITY.md ]; then
          echo "⚠️ SECURITY.md not found - consider adding one"
        else
          echo "✅ SECURITY.md found"
        fi
        
    - name: Check contribution guidelines
      run: |
        # Check if CONTRIBUTING.md exists
        if [ ! -f CONTRIBUTING.md ]; then
          echo "⚠️ CONTRIBUTING.md not found - consider adding one"
        else
          echo "✅ CONTRIBUTING.md found"
        fi

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run performance tests
      run: |
        # Test password analyzer performance
        echo "Testing password analyzer performance..."
        time python tools/security_armory/password_analyzer/password_analyzer.py "testpassword123" --disable-guardian-mandate
        
        # Test network scanner performance (safe mode)
        echo "Testing network scanner performance..."
        time python tools/security_armory/network_scanner/network_scanner.py 127.0.0.1 --disable-guardian-mandate
        
        # Test Guardian's Mandate performance
        echo "Testing Guardian's Mandate performance..."
        time python -c "
        try:
            from guardians_mandate_integration import GuardianTool, EvidenceLevel
            print('Guardian\'s Mandate framework loaded successfully')
        except ImportError:
            print('Guardian\'s Mandate framework not available')
        "